-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity my_ip_hls is
generic (
    C_S_AXI_ZISKASRULES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_ZISKASRULES_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_ziskasrules_AWVALID : IN STD_LOGIC;
    s_axi_ziskasrules_AWREADY : OUT STD_LOGIC;
    s_axi_ziskasrules_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ZISKASRULES_ADDR_WIDTH-1 downto 0);
    s_axi_ziskasrules_WVALID : IN STD_LOGIC;
    s_axi_ziskasrules_WREADY : OUT STD_LOGIC;
    s_axi_ziskasrules_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_ZISKASRULES_DATA_WIDTH-1 downto 0);
    s_axi_ziskasrules_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_ZISKASRULES_DATA_WIDTH/8-1 downto 0);
    s_axi_ziskasrules_ARVALID : IN STD_LOGIC;
    s_axi_ziskasrules_ARREADY : OUT STD_LOGIC;
    s_axi_ziskasrules_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ZISKASRULES_ADDR_WIDTH-1 downto 0);
    s_axi_ziskasrules_RVALID : OUT STD_LOGIC;
    s_axi_ziskasrules_RREADY : IN STD_LOGIC;
    s_axi_ziskasrules_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_ZISKASRULES_DATA_WIDTH-1 downto 0);
    s_axi_ziskasrules_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_ziskasrules_BVALID : OUT STD_LOGIC;
    s_axi_ziskasrules_BREADY : IN STD_LOGIC;
    s_axi_ziskasrules_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    slaveIn_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    slaveIn_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    slaveIn_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    masterOut_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    masterOut_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    masterOut_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    slaveIn_TVALID : IN STD_LOGIC;
    slaveIn_TREADY : OUT STD_LOGIC;
    masterOut_TVALID : OUT STD_LOGIC;
    masterOut_TREADY : IN STD_LOGIC );
end;


architecture behav of my_ip_hls is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "my_ip_hls,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z045ffg900-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=6.950000,HLS_SYN_LAT=7,HLS_SYN_TPT=1,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1019,HLS_SYN_LUT=2829}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal rule1_V : STD_LOGIC_VECTOR (31 downto 0);
    signal rule2_V : STD_LOGIC_VECTOR (31 downto 0);
    signal rule3_V : STD_LOGIC_VECTOR (31 downto 0);
    signal rule1cnt_V : STD_LOGIC_VECTOR (31 downto 0);
    signal rule2cnt_V : STD_LOGIC_VECTOR (31 downto 0);
    signal rule3cnt_V : STD_LOGIC_VECTOR (31 downto 0);
    signal my_ip_hls_entry3_U0_ap_start : STD_LOGIC;
    signal my_ip_hls_entry3_U0_ap_done : STD_LOGIC;
    signal my_ip_hls_entry3_U0_ap_continue : STD_LOGIC;
    signal my_ip_hls_entry3_U0_ap_idle : STD_LOGIC;
    signal my_ip_hls_entry3_U0_ap_ready : STD_LOGIC;
    signal my_ip_hls_entry3_U0_start_out : STD_LOGIC;
    signal my_ip_hls_entry3_U0_start_write : STD_LOGIC;
    signal my_ip_hls_entry3_U0_rule1_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal my_ip_hls_entry3_U0_rule1_V_out_write : STD_LOGIC;
    signal my_ip_hls_entry3_U0_rule2_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal my_ip_hls_entry3_U0_rule2_V_out_write : STD_LOGIC;
    signal my_ip_hls_entry3_U0_rule3_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal my_ip_hls_entry3_U0_rule3_V_out_write : STD_LOGIC;
    signal my_ip_hls_entry3_U0_rule1cnt_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal my_ip_hls_entry3_U0_rule1cnt_V_out_write : STD_LOGIC;
    signal my_ip_hls_entry3_U0_rule2cnt_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal my_ip_hls_entry3_U0_rule2cnt_V_out_write : STD_LOGIC;
    signal my_ip_hls_entry3_U0_rule3cnt_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal my_ip_hls_entry3_U0_rule3cnt_V_out_write : STD_LOGIC;
    signal my_ip_hls_entry90_U0_ap_start : STD_LOGIC;
    signal my_ip_hls_entry90_U0_start_full_n : STD_LOGIC;
    signal my_ip_hls_entry90_U0_ap_done : STD_LOGIC;
    signal my_ip_hls_entry90_U0_ap_continue : STD_LOGIC;
    signal my_ip_hls_entry90_U0_ap_idle : STD_LOGIC;
    signal my_ip_hls_entry90_U0_ap_ready : STD_LOGIC;
    signal my_ip_hls_entry90_U0_start_out : STD_LOGIC;
    signal my_ip_hls_entry90_U0_start_write : STD_LOGIC;
    signal my_ip_hls_entry90_U0_rule1_V_read : STD_LOGIC;
    signal my_ip_hls_entry90_U0_rule2_V_read : STD_LOGIC;
    signal my_ip_hls_entry90_U0_rule3_V_read : STD_LOGIC;
    signal my_ip_hls_entry90_U0_rule1cnt_V_read : STD_LOGIC;
    signal my_ip_hls_entry90_U0_rule2cnt_V_read : STD_LOGIC;
    signal my_ip_hls_entry90_U0_rule3cnt_V_read : STD_LOGIC;
    signal my_ip_hls_entry90_U0_rule1_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal my_ip_hls_entry90_U0_rule1_V_out_write : STD_LOGIC;
    signal my_ip_hls_entry90_U0_rule2_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal my_ip_hls_entry90_U0_rule2_V_out_write : STD_LOGIC;
    signal my_ip_hls_entry90_U0_rule3_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal my_ip_hls_entry90_U0_rule3_V_out_write : STD_LOGIC;
    signal my_ip_hls_entry90_U0_rule1cnt_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal my_ip_hls_entry90_U0_rule1cnt_V_out_write : STD_LOGIC;
    signal my_ip_hls_entry90_U0_rule2cnt_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal my_ip_hls_entry90_U0_rule2cnt_V_out_write : STD_LOGIC;
    signal my_ip_hls_entry90_U0_rule3cnt_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal my_ip_hls_entry90_U0_rule3cnt_V_out_write : STD_LOGIC;
    signal Block_codeRepl6_proc_U0_ap_start : STD_LOGIC;
    signal Block_codeRepl6_proc_U0_ap_done : STD_LOGIC;
    signal Block_codeRepl6_proc_U0_ap_continue : STD_LOGIC;
    signal Block_codeRepl6_proc_U0_ap_idle : STD_LOGIC;
    signal Block_codeRepl6_proc_U0_ap_ready : STD_LOGIC;
    signal Block_codeRepl6_proc_U0_rule3cnt_V_read : STD_LOGIC;
    signal Block_codeRepl6_proc_U0_rule2cnt_V_read : STD_LOGIC;
    signal Block_codeRepl6_proc_U0_rule1cnt_V_read : STD_LOGIC;
    signal Block_codeRepl6_proc_U0_rule3cnt_V_buf_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_codeRepl6_proc_U0_rule3cnt_V_buf_out_write : STD_LOGIC;
    signal Block_codeRepl6_proc_U0_rule2cnt_V_buf_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_codeRepl6_proc_U0_rule2cnt_V_buf_out_write : STD_LOGIC;
    signal Block_codeRepl6_proc_U0_rule1cnt_V_buf_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_codeRepl6_proc_U0_rule1cnt_V_buf_out_write : STD_LOGIC;
    signal okanonas82_U0_ap_start : STD_LOGIC;
    signal okanonas82_U0_ap_done : STD_LOGIC;
    signal okanonas82_U0_ap_continue : STD_LOGIC;
    signal okanonas82_U0_ap_idle : STD_LOGIC;
    signal okanonas82_U0_ap_ready : STD_LOGIC;
    signal okanonas82_U0_rule_V_read : STD_LOGIC;
    signal okanonas82_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_regrule1_V_channel : STD_LOGIC;
    signal regrule1_V_channel_full_n : STD_LOGIC;
    signal okanonas83_U0_ap_start : STD_LOGIC;
    signal okanonas83_U0_ap_done : STD_LOGIC;
    signal okanonas83_U0_ap_continue : STD_LOGIC;
    signal okanonas83_U0_ap_idle : STD_LOGIC;
    signal okanonas83_U0_ap_ready : STD_LOGIC;
    signal okanonas83_U0_rule_V_read : STD_LOGIC;
    signal okanonas83_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_regrule2_V_channel : STD_LOGIC;
    signal regrule2_V_channel_full_n : STD_LOGIC;
    signal okanonas_U0_ap_start : STD_LOGIC;
    signal okanonas_U0_ap_done : STD_LOGIC;
    signal okanonas_U0_ap_continue : STD_LOGIC;
    signal okanonas_U0_ap_idle : STD_LOGIC;
    signal okanonas_U0_ap_ready : STD_LOGIC;
    signal okanonas_U0_rule_V_read : STD_LOGIC;
    signal okanonas_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_regrule3_V_channel : STD_LOGIC;
    signal regrule3_V_channel_full_n : STD_LOGIC;
    signal ps2ip_fifo_U0_ap_start : STD_LOGIC;
    signal ps2ip_fifo_U0_ap_done : STD_LOGIC;
    signal ps2ip_fifo_U0_ap_continue : STD_LOGIC;
    signal ps2ip_fifo_U0_ap_idle : STD_LOGIC;
    signal ps2ip_fifo_U0_ap_ready : STD_LOGIC;
    signal ps2ip_fifo_U0_slaveIn_TREADY : STD_LOGIC;
    signal ps2ip_fifo_U0_ps2ipFifo_V_data_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ps2ip_fifo_U0_ps2ipFifo_V_data_V_write : STD_LOGIC;
    signal ps2ip_fifo_U0_ps2ipFifo_V_strb_V_din : STD_LOGIC_VECTOR (3 downto 0);
    signal ps2ip_fifo_U0_ps2ipFifo_V_strb_V_write : STD_LOGIC;
    signal ps2ip_fifo_U0_ps2ipFifo_V_last_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal ps2ip_fifo_U0_ps2ipFifo_V_last_V_write : STD_LOGIC;
    signal core_U0_ap_start : STD_LOGIC;
    signal core_U0_start_full_n : STD_LOGIC;
    signal core_U0_ap_done : STD_LOGIC;
    signal core_U0_ap_continue : STD_LOGIC;
    signal core_U0_ap_idle : STD_LOGIC;
    signal core_U0_ap_ready : STD_LOGIC;
    signal core_U0_rule1cnt_V_buf_read : STD_LOGIC;
    signal core_U0_rule2cnt_V_buf_read : STD_LOGIC;
    signal core_U0_rule3cnt_V_buf_read : STD_LOGIC;
    signal core_U0_rule1cnt_V_buf_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal core_U0_rule1cnt_V_buf_out_write : STD_LOGIC;
    signal core_U0_rule2cnt_V_buf_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal core_U0_rule2cnt_V_buf_out_write : STD_LOGIC;
    signal core_U0_rule3cnt_V_buf_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal core_U0_rule3cnt_V_buf_out_write : STD_LOGIC;
    signal core_U0_start_out : STD_LOGIC;
    signal core_U0_start_write : STD_LOGIC;
    signal core_U0_ps2ipFifo_V_data_V_read : STD_LOGIC;
    signal core_U0_ps2ipFifo_V_strb_V_read : STD_LOGIC;
    signal core_U0_ps2ipFifo_V_last_V_read : STD_LOGIC;
    signal core_U0_ip2psFifo_V_data_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal core_U0_ip2psFifo_V_data_V_write : STD_LOGIC;
    signal core_U0_ip2psFifo_V_strb_V_din : STD_LOGIC_VECTOR (3 downto 0);
    signal core_U0_ip2psFifo_V_strb_V_write : STD_LOGIC;
    signal core_U0_ip2psFifo_V_last_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal core_U0_ip2psFifo_V_last_V_write : STD_LOGIC;
    signal okanonas284_U0_ap_start : STD_LOGIC;
    signal okanonas284_U0_ap_done : STD_LOGIC;
    signal okanonas284_U0_ap_continue : STD_LOGIC;
    signal okanonas284_U0_ap_idle : STD_LOGIC;
    signal okanonas284_U0_ap_ready : STD_LOGIC;
    signal okanonas284_U0_rule1cnt_V_buf_read : STD_LOGIC;
    signal okanonas285_U0_ap_start : STD_LOGIC;
    signal okanonas285_U0_ap_done : STD_LOGIC;
    signal okanonas285_U0_ap_continue : STD_LOGIC;
    signal okanonas285_U0_ap_idle : STD_LOGIC;
    signal okanonas285_U0_ap_ready : STD_LOGIC;
    signal okanonas285_U0_rule2cnt_V_buf_read : STD_LOGIC;
    signal okanonas2_U0_ap_start : STD_LOGIC;
    signal okanonas2_U0_ap_done : STD_LOGIC;
    signal okanonas2_U0_ap_continue : STD_LOGIC;
    signal okanonas2_U0_ap_idle : STD_LOGIC;
    signal okanonas2_U0_ap_ready : STD_LOGIC;
    signal okanonas2_U0_rule3cnt_V_buf_read : STD_LOGIC;
    signal ip2ps_fifo_U0_ap_start : STD_LOGIC;
    signal ip2ps_fifo_U0_ap_done : STD_LOGIC;
    signal ip2ps_fifo_U0_ap_continue : STD_LOGIC;
    signal ip2ps_fifo_U0_ap_idle : STD_LOGIC;
    signal ip2ps_fifo_U0_ap_ready : STD_LOGIC;
    signal ip2ps_fifo_U0_masterOut_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal ip2ps_fifo_U0_masterOut_TVALID : STD_LOGIC;
    signal ip2ps_fifo_U0_masterOut_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal ip2ps_fifo_U0_masterOut_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal ip2ps_fifo_U0_ip2psFifo_V_data_V_read : STD_LOGIC;
    signal ip2ps_fifo_U0_ip2psFifo_V_strb_V_read : STD_LOGIC;
    signal ip2ps_fifo_U0_ip2psFifo_V_last_V_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal rule1_V_c1_full_n : STD_LOGIC;
    signal rule1_V_c1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal rule1_V_c1_empty_n : STD_LOGIC;
    signal rule2_V_c2_full_n : STD_LOGIC;
    signal rule2_V_c2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal rule2_V_c2_empty_n : STD_LOGIC;
    signal rule3_V_c3_full_n : STD_LOGIC;
    signal rule3_V_c3_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal rule3_V_c3_empty_n : STD_LOGIC;
    signal rule1cnt_V_c4_full_n : STD_LOGIC;
    signal rule1cnt_V_c4_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal rule1cnt_V_c4_empty_n : STD_LOGIC;
    signal rule2cnt_V_c5_full_n : STD_LOGIC;
    signal rule2cnt_V_c5_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal rule2cnt_V_c5_empty_n : STD_LOGIC;
    signal rule3cnt_V_c6_full_n : STD_LOGIC;
    signal rule3cnt_V_c6_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal rule3cnt_V_c6_empty_n : STD_LOGIC;
    signal rule1_V_c_full_n : STD_LOGIC;
    signal rule1_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal rule1_V_c_empty_n : STD_LOGIC;
    signal rule2_V_c_full_n : STD_LOGIC;
    signal rule2_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal rule2_V_c_empty_n : STD_LOGIC;
    signal rule3_V_c_full_n : STD_LOGIC;
    signal rule3_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal rule3_V_c_empty_n : STD_LOGIC;
    signal rule1cnt_V_c_full_n : STD_LOGIC;
    signal rule1cnt_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal rule1cnt_V_c_empty_n : STD_LOGIC;
    signal rule2cnt_V_c_full_n : STD_LOGIC;
    signal rule2cnt_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal rule2cnt_V_c_empty_n : STD_LOGIC;
    signal rule3cnt_V_c_full_n : STD_LOGIC;
    signal rule3cnt_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal rule3cnt_V_c_empty_n : STD_LOGIC;
    signal rule3cnt_V_buf_c_full_n : STD_LOGIC;
    signal rule3cnt_V_buf_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal rule3cnt_V_buf_c_empty_n : STD_LOGIC;
    signal rule2cnt_V_buf_c_full_n : STD_LOGIC;
    signal rule2cnt_V_buf_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal rule2cnt_V_buf_c_empty_n : STD_LOGIC;
    signal rule1cnt_V_buf_c_full_n : STD_LOGIC;
    signal rule1cnt_V_buf_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal rule1cnt_V_buf_c_empty_n : STD_LOGIC;
    signal regrule1_V_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal regrule1_V_channel_empty_n : STD_LOGIC;
    signal regrule2_V_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal regrule2_V_channel_empty_n : STD_LOGIC;
    signal regrule3_V_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal regrule3_V_channel_empty_n : STD_LOGIC;
    signal ps2ipFifo_V_data_V_full_n : STD_LOGIC;
    signal ps2ipFifo_V_data_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ps2ipFifo_V_data_V_empty_n : STD_LOGIC;
    signal ps2ipFifo_V_strb_V_full_n : STD_LOGIC;
    signal ps2ipFifo_V_strb_V_dout : STD_LOGIC_VECTOR (3 downto 0);
    signal ps2ipFifo_V_strb_V_empty_n : STD_LOGIC;
    signal ps2ipFifo_V_last_V_full_n : STD_LOGIC;
    signal ps2ipFifo_V_last_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal ps2ipFifo_V_last_V_empty_n : STD_LOGIC;
    signal rule1cnt_V_buf_c31_full_n : STD_LOGIC;
    signal rule1cnt_V_buf_c31_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal rule1cnt_V_buf_c31_empty_n : STD_LOGIC;
    signal rule2cnt_V_buf_c32_full_n : STD_LOGIC;
    signal rule2cnt_V_buf_c32_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal rule2cnt_V_buf_c32_empty_n : STD_LOGIC;
    signal rule3cnt_V_buf_c33_full_n : STD_LOGIC;
    signal rule3cnt_V_buf_c33_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal rule3cnt_V_buf_c33_empty_n : STD_LOGIC;
    signal ip2psFifo_V_data_V_full_n : STD_LOGIC;
    signal ip2psFifo_V_data_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ip2psFifo_V_data_V_empty_n : STD_LOGIC;
    signal ip2psFifo_V_strb_V_full_n : STD_LOGIC;
    signal ip2psFifo_V_strb_V_dout : STD_LOGIC_VECTOR (3 downto 0);
    signal ip2psFifo_V_strb_V_empty_n : STD_LOGIC;
    signal ip2psFifo_V_last_V_full_n : STD_LOGIC;
    signal ip2psFifo_V_last_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal ip2psFifo_V_last_V_empty_n : STD_LOGIC;
    signal start_for_my_ip_hls_entry90_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_my_ip_hls_entry90_U0_full_n : STD_LOGIC;
    signal start_for_my_ip_hls_entry90_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_my_ip_hls_entry90_U0_empty_n : STD_LOGIC;
    signal start_for_Block_codeRepl6_proc_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Block_codeRepl6_proc_U0_full_n : STD_LOGIC;
    signal start_for_Block_codeRepl6_proc_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Block_codeRepl6_proc_U0_empty_n : STD_LOGIC;
    signal start_for_okanonas82_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_okanonas82_U0_full_n : STD_LOGIC;
    signal start_for_okanonas82_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_okanonas82_U0_empty_n : STD_LOGIC;
    signal start_for_okanonas83_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_okanonas83_U0_full_n : STD_LOGIC;
    signal start_for_okanonas83_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_okanonas83_U0_empty_n : STD_LOGIC;
    signal start_for_okanonas_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_okanonas_U0_full_n : STD_LOGIC;
    signal start_for_okanonas_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_okanonas_U0_empty_n : STD_LOGIC;
    signal Block_codeRepl6_proc_U0_start_full_n : STD_LOGIC;
    signal Block_codeRepl6_proc_U0_start_write : STD_LOGIC;
    signal okanonas82_U0_start_full_n : STD_LOGIC;
    signal okanonas82_U0_start_write : STD_LOGIC;
    signal okanonas83_U0_start_full_n : STD_LOGIC;
    signal okanonas83_U0_start_write : STD_LOGIC;
    signal okanonas_U0_start_full_n : STD_LOGIC;
    signal okanonas_U0_start_write : STD_LOGIC;
    signal ps2ip_fifo_U0_start_full_n : STD_LOGIC;
    signal ps2ip_fifo_U0_start_write : STD_LOGIC;
    signal start_for_okanonas284_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_okanonas284_U0_full_n : STD_LOGIC;
    signal start_for_okanonas284_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_okanonas284_U0_empty_n : STD_LOGIC;
    signal start_for_okanonas285_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_okanonas285_U0_full_n : STD_LOGIC;
    signal start_for_okanonas285_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_okanonas285_U0_empty_n : STD_LOGIC;
    signal start_for_okanonas2_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_okanonas2_U0_full_n : STD_LOGIC;
    signal start_for_okanonas2_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_okanonas2_U0_empty_n : STD_LOGIC;
    signal start_for_ip2ps_fifo_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_ip2ps_fifo_U0_full_n : STD_LOGIC;
    signal start_for_ip2ps_fifo_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_ip2ps_fifo_U0_empty_n : STD_LOGIC;
    signal okanonas284_U0_start_full_n : STD_LOGIC;
    signal okanonas284_U0_start_write : STD_LOGIC;
    signal okanonas285_U0_start_full_n : STD_LOGIC;
    signal okanonas285_U0_start_write : STD_LOGIC;
    signal okanonas2_U0_start_full_n : STD_LOGIC;
    signal okanonas2_U0_start_write : STD_LOGIC;
    signal ip2ps_fifo_U0_start_full_n : STD_LOGIC;
    signal ip2ps_fifo_U0_start_write : STD_LOGIC;

    component my_ip_hls_entry3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        rule1_V : IN STD_LOGIC_VECTOR (31 downto 0);
        rule2_V : IN STD_LOGIC_VECTOR (31 downto 0);
        rule3_V : IN STD_LOGIC_VECTOR (31 downto 0);
        rule1cnt_V : IN STD_LOGIC_VECTOR (31 downto 0);
        rule2cnt_V : IN STD_LOGIC_VECTOR (31 downto 0);
        rule3cnt_V : IN STD_LOGIC_VECTOR (31 downto 0);
        rule1_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        rule1_V_out_full_n : IN STD_LOGIC;
        rule1_V_out_write : OUT STD_LOGIC;
        rule2_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        rule2_V_out_full_n : IN STD_LOGIC;
        rule2_V_out_write : OUT STD_LOGIC;
        rule3_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        rule3_V_out_full_n : IN STD_LOGIC;
        rule3_V_out_write : OUT STD_LOGIC;
        rule1cnt_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        rule1cnt_V_out_full_n : IN STD_LOGIC;
        rule1cnt_V_out_write : OUT STD_LOGIC;
        rule2cnt_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        rule2cnt_V_out_full_n : IN STD_LOGIC;
        rule2cnt_V_out_write : OUT STD_LOGIC;
        rule3cnt_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        rule3cnt_V_out_full_n : IN STD_LOGIC;
        rule3cnt_V_out_write : OUT STD_LOGIC );
    end component;


    component my_ip_hls_entry90 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        rule1_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        rule1_V_empty_n : IN STD_LOGIC;
        rule1_V_read : OUT STD_LOGIC;
        rule2_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        rule2_V_empty_n : IN STD_LOGIC;
        rule2_V_read : OUT STD_LOGIC;
        rule3_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        rule3_V_empty_n : IN STD_LOGIC;
        rule3_V_read : OUT STD_LOGIC;
        rule1cnt_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        rule1cnt_V_empty_n : IN STD_LOGIC;
        rule1cnt_V_read : OUT STD_LOGIC;
        rule2cnt_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        rule2cnt_V_empty_n : IN STD_LOGIC;
        rule2cnt_V_read : OUT STD_LOGIC;
        rule3cnt_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        rule3cnt_V_empty_n : IN STD_LOGIC;
        rule3cnt_V_read : OUT STD_LOGIC;
        rule1_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        rule1_V_out_full_n : IN STD_LOGIC;
        rule1_V_out_write : OUT STD_LOGIC;
        rule2_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        rule2_V_out_full_n : IN STD_LOGIC;
        rule2_V_out_write : OUT STD_LOGIC;
        rule3_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        rule3_V_out_full_n : IN STD_LOGIC;
        rule3_V_out_write : OUT STD_LOGIC;
        rule1cnt_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        rule1cnt_V_out_full_n : IN STD_LOGIC;
        rule1cnt_V_out_write : OUT STD_LOGIC;
        rule2cnt_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        rule2cnt_V_out_full_n : IN STD_LOGIC;
        rule2cnt_V_out_write : OUT STD_LOGIC;
        rule3cnt_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        rule3cnt_V_out_full_n : IN STD_LOGIC;
        rule3cnt_V_out_write : OUT STD_LOGIC );
    end component;


    component Block_codeRepl6_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rule3cnt_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        rule3cnt_V_empty_n : IN STD_LOGIC;
        rule3cnt_V_read : OUT STD_LOGIC;
        rule2cnt_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        rule2cnt_V_empty_n : IN STD_LOGIC;
        rule2cnt_V_read : OUT STD_LOGIC;
        rule1cnt_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        rule1cnt_V_empty_n : IN STD_LOGIC;
        rule1cnt_V_read : OUT STD_LOGIC;
        rule3cnt_V_buf_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        rule3cnt_V_buf_out_full_n : IN STD_LOGIC;
        rule3cnt_V_buf_out_write : OUT STD_LOGIC;
        rule2cnt_V_buf_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        rule2cnt_V_buf_out_full_n : IN STD_LOGIC;
        rule2cnt_V_buf_out_write : OUT STD_LOGIC;
        rule1cnt_V_buf_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        rule1cnt_V_buf_out_full_n : IN STD_LOGIC;
        rule1cnt_V_buf_out_write : OUT STD_LOGIC );
    end component;


    component okanonas82 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rule_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        rule_V_empty_n : IN STD_LOGIC;
        rule_V_read : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component okanonas83 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rule_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        rule_V_empty_n : IN STD_LOGIC;
        rule_V_read : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component okanonas IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rule_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        rule_V_empty_n : IN STD_LOGIC;
        rule_V_read : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ps2ip_fifo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        slaveIn_TVALID : IN STD_LOGIC;
        slaveIn_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        slaveIn_TREADY : OUT STD_LOGIC;
        slaveIn_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        slaveIn_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        ps2ipFifo_V_data_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ps2ipFifo_V_data_V_full_n : IN STD_LOGIC;
        ps2ipFifo_V_data_V_write : OUT STD_LOGIC;
        ps2ipFifo_V_strb_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
        ps2ipFifo_V_strb_V_full_n : IN STD_LOGIC;
        ps2ipFifo_V_strb_V_write : OUT STD_LOGIC;
        ps2ipFifo_V_last_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        ps2ipFifo_V_last_V_full_n : IN STD_LOGIC;
        ps2ipFifo_V_last_V_write : OUT STD_LOGIC );
    end component;


    component core IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rule1cnt_V_buf_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        rule1cnt_V_buf_empty_n : IN STD_LOGIC;
        rule1cnt_V_buf_read : OUT STD_LOGIC;
        rule2cnt_V_buf_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        rule2cnt_V_buf_empty_n : IN STD_LOGIC;
        rule2cnt_V_buf_read : OUT STD_LOGIC;
        rule3cnt_V_buf_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        rule3cnt_V_buf_empty_n : IN STD_LOGIC;
        rule3cnt_V_buf_read : OUT STD_LOGIC;
        rule1cnt_V_buf_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        rule1cnt_V_buf_out_full_n : IN STD_LOGIC;
        rule1cnt_V_buf_out_write : OUT STD_LOGIC;
        rule2cnt_V_buf_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        rule2cnt_V_buf_out_full_n : IN STD_LOGIC;
        rule2cnt_V_buf_out_write : OUT STD_LOGIC;
        rule3cnt_V_buf_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        rule3cnt_V_buf_out_full_n : IN STD_LOGIC;
        rule3cnt_V_buf_out_write : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ps2ipFifo_V_data_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ps2ipFifo_V_data_V_empty_n : IN STD_LOGIC;
        ps2ipFifo_V_data_V_read : OUT STD_LOGIC;
        ps2ipFifo_V_strb_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
        ps2ipFifo_V_strb_V_empty_n : IN STD_LOGIC;
        ps2ipFifo_V_strb_V_read : OUT STD_LOGIC;
        ps2ipFifo_V_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        ps2ipFifo_V_last_V_empty_n : IN STD_LOGIC;
        ps2ipFifo_V_last_V_read : OUT STD_LOGIC;
        ip2psFifo_V_data_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ip2psFifo_V_data_V_full_n : IN STD_LOGIC;
        ip2psFifo_V_data_V_write : OUT STD_LOGIC;
        ip2psFifo_V_strb_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
        ip2psFifo_V_strb_V_full_n : IN STD_LOGIC;
        ip2psFifo_V_strb_V_write : OUT STD_LOGIC;
        ip2psFifo_V_last_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        ip2psFifo_V_last_V_full_n : IN STD_LOGIC;
        ip2psFifo_V_last_V_write : OUT STD_LOGIC );
    end component;


    component okanonas284 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rule1cnt_V_buf_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        rule1cnt_V_buf_empty_n : IN STD_LOGIC;
        rule1cnt_V_buf_read : OUT STD_LOGIC );
    end component;


    component okanonas285 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rule2cnt_V_buf_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        rule2cnt_V_buf_empty_n : IN STD_LOGIC;
        rule2cnt_V_buf_read : OUT STD_LOGIC );
    end component;


    component okanonas2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rule3cnt_V_buf_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        rule3cnt_V_buf_empty_n : IN STD_LOGIC;
        rule3cnt_V_buf_read : OUT STD_LOGIC );
    end component;


    component ip2ps_fifo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        masterOut_TREADY : IN STD_LOGIC;
        masterOut_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        masterOut_TVALID : OUT STD_LOGIC;
        masterOut_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        masterOut_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        ip2psFifo_V_data_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ip2psFifo_V_data_V_empty_n : IN STD_LOGIC;
        ip2psFifo_V_data_V_read : OUT STD_LOGIC;
        ip2psFifo_V_strb_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
        ip2psFifo_V_strb_V_empty_n : IN STD_LOGIC;
        ip2psFifo_V_strb_V_read : OUT STD_LOGIC;
        ip2psFifo_V_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        ip2psFifo_V_last_V_empty_n : IN STD_LOGIC;
        ip2psFifo_V_last_V_read : OUT STD_LOGIC );
    end component;


    component fifo_w32_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d64_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w4_d64_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (3 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w1_d64_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_my_ip_hbkb IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Block_ccud IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_okanonadEe IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_okanonaeOg IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_okanonafYi IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_okanonag8j IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_okanonahbi IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_okanonaibs IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_ip2ps_fjbC IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component my_ip_hls_ziskasrules_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        rule1_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        rule2_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        rule3_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        rule1cnt_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        rule2cnt_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        rule3cnt_V : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    my_ip_hls_ziskasrules_s_axi_U : component my_ip_hls_ziskasrules_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_ZISKASRULES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_ZISKASRULES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_ziskasrules_AWVALID,
        AWREADY => s_axi_ziskasrules_AWREADY,
        AWADDR => s_axi_ziskasrules_AWADDR,
        WVALID => s_axi_ziskasrules_WVALID,
        WREADY => s_axi_ziskasrules_WREADY,
        WDATA => s_axi_ziskasrules_WDATA,
        WSTRB => s_axi_ziskasrules_WSTRB,
        ARVALID => s_axi_ziskasrules_ARVALID,
        ARREADY => s_axi_ziskasrules_ARREADY,
        ARADDR => s_axi_ziskasrules_ARADDR,
        RVALID => s_axi_ziskasrules_RVALID,
        RREADY => s_axi_ziskasrules_RREADY,
        RDATA => s_axi_ziskasrules_RDATA,
        RRESP => s_axi_ziskasrules_RRESP,
        BVALID => s_axi_ziskasrules_BVALID,
        BREADY => s_axi_ziskasrules_BREADY,
        BRESP => s_axi_ziskasrules_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        rule1_V => rule1_V,
        rule2_V => rule2_V,
        rule3_V => rule3_V,
        rule1cnt_V => rule1cnt_V,
        rule2cnt_V => rule2cnt_V,
        rule3cnt_V => rule3cnt_V);

    my_ip_hls_entry3_U0 : component my_ip_hls_entry3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => my_ip_hls_entry3_U0_ap_start,
        start_full_n => start_for_my_ip_hls_entry90_U0_full_n,
        ap_done => my_ip_hls_entry3_U0_ap_done,
        ap_continue => my_ip_hls_entry3_U0_ap_continue,
        ap_idle => my_ip_hls_entry3_U0_ap_idle,
        ap_ready => my_ip_hls_entry3_U0_ap_ready,
        start_out => my_ip_hls_entry3_U0_start_out,
        start_write => my_ip_hls_entry3_U0_start_write,
        rule1_V => rule1_V,
        rule2_V => rule2_V,
        rule3_V => rule3_V,
        rule1cnt_V => rule1cnt_V,
        rule2cnt_V => rule2cnt_V,
        rule3cnt_V => rule3cnt_V,
        rule1_V_out_din => my_ip_hls_entry3_U0_rule1_V_out_din,
        rule1_V_out_full_n => rule1_V_c1_full_n,
        rule1_V_out_write => my_ip_hls_entry3_U0_rule1_V_out_write,
        rule2_V_out_din => my_ip_hls_entry3_U0_rule2_V_out_din,
        rule2_V_out_full_n => rule2_V_c2_full_n,
        rule2_V_out_write => my_ip_hls_entry3_U0_rule2_V_out_write,
        rule3_V_out_din => my_ip_hls_entry3_U0_rule3_V_out_din,
        rule3_V_out_full_n => rule3_V_c3_full_n,
        rule3_V_out_write => my_ip_hls_entry3_U0_rule3_V_out_write,
        rule1cnt_V_out_din => my_ip_hls_entry3_U0_rule1cnt_V_out_din,
        rule1cnt_V_out_full_n => rule1cnt_V_c4_full_n,
        rule1cnt_V_out_write => my_ip_hls_entry3_U0_rule1cnt_V_out_write,
        rule2cnt_V_out_din => my_ip_hls_entry3_U0_rule2cnt_V_out_din,
        rule2cnt_V_out_full_n => rule2cnt_V_c5_full_n,
        rule2cnt_V_out_write => my_ip_hls_entry3_U0_rule2cnt_V_out_write,
        rule3cnt_V_out_din => my_ip_hls_entry3_U0_rule3cnt_V_out_din,
        rule3cnt_V_out_full_n => rule3cnt_V_c6_full_n,
        rule3cnt_V_out_write => my_ip_hls_entry3_U0_rule3cnt_V_out_write);

    my_ip_hls_entry90_U0 : component my_ip_hls_entry90
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => my_ip_hls_entry90_U0_ap_start,
        start_full_n => my_ip_hls_entry90_U0_start_full_n,
        ap_done => my_ip_hls_entry90_U0_ap_done,
        ap_continue => my_ip_hls_entry90_U0_ap_continue,
        ap_idle => my_ip_hls_entry90_U0_ap_idle,
        ap_ready => my_ip_hls_entry90_U0_ap_ready,
        start_out => my_ip_hls_entry90_U0_start_out,
        start_write => my_ip_hls_entry90_U0_start_write,
        rule1_V_dout => rule1_V_c1_dout,
        rule1_V_empty_n => rule1_V_c1_empty_n,
        rule1_V_read => my_ip_hls_entry90_U0_rule1_V_read,
        rule2_V_dout => rule2_V_c2_dout,
        rule2_V_empty_n => rule2_V_c2_empty_n,
        rule2_V_read => my_ip_hls_entry90_U0_rule2_V_read,
        rule3_V_dout => rule3_V_c3_dout,
        rule3_V_empty_n => rule3_V_c3_empty_n,
        rule3_V_read => my_ip_hls_entry90_U0_rule3_V_read,
        rule1cnt_V_dout => rule1cnt_V_c4_dout,
        rule1cnt_V_empty_n => rule1cnt_V_c4_empty_n,
        rule1cnt_V_read => my_ip_hls_entry90_U0_rule1cnt_V_read,
        rule2cnt_V_dout => rule2cnt_V_c5_dout,
        rule2cnt_V_empty_n => rule2cnt_V_c5_empty_n,
        rule2cnt_V_read => my_ip_hls_entry90_U0_rule2cnt_V_read,
        rule3cnt_V_dout => rule3cnt_V_c6_dout,
        rule3cnt_V_empty_n => rule3cnt_V_c6_empty_n,
        rule3cnt_V_read => my_ip_hls_entry90_U0_rule3cnt_V_read,
        rule1_V_out_din => my_ip_hls_entry90_U0_rule1_V_out_din,
        rule1_V_out_full_n => rule1_V_c_full_n,
        rule1_V_out_write => my_ip_hls_entry90_U0_rule1_V_out_write,
        rule2_V_out_din => my_ip_hls_entry90_U0_rule2_V_out_din,
        rule2_V_out_full_n => rule2_V_c_full_n,
        rule2_V_out_write => my_ip_hls_entry90_U0_rule2_V_out_write,
        rule3_V_out_din => my_ip_hls_entry90_U0_rule3_V_out_din,
        rule3_V_out_full_n => rule3_V_c_full_n,
        rule3_V_out_write => my_ip_hls_entry90_U0_rule3_V_out_write,
        rule1cnt_V_out_din => my_ip_hls_entry90_U0_rule1cnt_V_out_din,
        rule1cnt_V_out_full_n => rule1cnt_V_c_full_n,
        rule1cnt_V_out_write => my_ip_hls_entry90_U0_rule1cnt_V_out_write,
        rule2cnt_V_out_din => my_ip_hls_entry90_U0_rule2cnt_V_out_din,
        rule2cnt_V_out_full_n => rule2cnt_V_c_full_n,
        rule2cnt_V_out_write => my_ip_hls_entry90_U0_rule2cnt_V_out_write,
        rule3cnt_V_out_din => my_ip_hls_entry90_U0_rule3cnt_V_out_din,
        rule3cnt_V_out_full_n => rule3cnt_V_c_full_n,
        rule3cnt_V_out_write => my_ip_hls_entry90_U0_rule3cnt_V_out_write);

    Block_codeRepl6_proc_U0 : component Block_codeRepl6_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_codeRepl6_proc_U0_ap_start,
        ap_done => Block_codeRepl6_proc_U0_ap_done,
        ap_continue => Block_codeRepl6_proc_U0_ap_continue,
        ap_idle => Block_codeRepl6_proc_U0_ap_idle,
        ap_ready => Block_codeRepl6_proc_U0_ap_ready,
        rule3cnt_V_dout => rule3cnt_V_c_dout,
        rule3cnt_V_empty_n => rule3cnt_V_c_empty_n,
        rule3cnt_V_read => Block_codeRepl6_proc_U0_rule3cnt_V_read,
        rule2cnt_V_dout => rule2cnt_V_c_dout,
        rule2cnt_V_empty_n => rule2cnt_V_c_empty_n,
        rule2cnt_V_read => Block_codeRepl6_proc_U0_rule2cnt_V_read,
        rule1cnt_V_dout => rule1cnt_V_c_dout,
        rule1cnt_V_empty_n => rule1cnt_V_c_empty_n,
        rule1cnt_V_read => Block_codeRepl6_proc_U0_rule1cnt_V_read,
        rule3cnt_V_buf_out_din => Block_codeRepl6_proc_U0_rule3cnt_V_buf_out_din,
        rule3cnt_V_buf_out_full_n => rule3cnt_V_buf_c_full_n,
        rule3cnt_V_buf_out_write => Block_codeRepl6_proc_U0_rule3cnt_V_buf_out_write,
        rule2cnt_V_buf_out_din => Block_codeRepl6_proc_U0_rule2cnt_V_buf_out_din,
        rule2cnt_V_buf_out_full_n => rule2cnt_V_buf_c_full_n,
        rule2cnt_V_buf_out_write => Block_codeRepl6_proc_U0_rule2cnt_V_buf_out_write,
        rule1cnt_V_buf_out_din => Block_codeRepl6_proc_U0_rule1cnt_V_buf_out_din,
        rule1cnt_V_buf_out_full_n => rule1cnt_V_buf_c_full_n,
        rule1cnt_V_buf_out_write => Block_codeRepl6_proc_U0_rule1cnt_V_buf_out_write);

    okanonas82_U0 : component okanonas82
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => okanonas82_U0_ap_start,
        ap_done => okanonas82_U0_ap_done,
        ap_continue => okanonas82_U0_ap_continue,
        ap_idle => okanonas82_U0_ap_idle,
        ap_ready => okanonas82_U0_ap_ready,
        rule_V_dout => rule1_V_c_dout,
        rule_V_empty_n => rule1_V_c_empty_n,
        rule_V_read => okanonas82_U0_rule_V_read,
        ap_return => okanonas82_U0_ap_return);

    okanonas83_U0 : component okanonas83
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => okanonas83_U0_ap_start,
        ap_done => okanonas83_U0_ap_done,
        ap_continue => okanonas83_U0_ap_continue,
        ap_idle => okanonas83_U0_ap_idle,
        ap_ready => okanonas83_U0_ap_ready,
        rule_V_dout => rule2_V_c_dout,
        rule_V_empty_n => rule2_V_c_empty_n,
        rule_V_read => okanonas83_U0_rule_V_read,
        ap_return => okanonas83_U0_ap_return);

    okanonas_U0 : component okanonas
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => okanonas_U0_ap_start,
        ap_done => okanonas_U0_ap_done,
        ap_continue => okanonas_U0_ap_continue,
        ap_idle => okanonas_U0_ap_idle,
        ap_ready => okanonas_U0_ap_ready,
        rule_V_dout => rule3_V_c_dout,
        rule_V_empty_n => rule3_V_c_empty_n,
        rule_V_read => okanonas_U0_rule_V_read,
        ap_return => okanonas_U0_ap_return);

    ps2ip_fifo_U0 : component ps2ip_fifo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ps2ip_fifo_U0_ap_start,
        ap_done => ps2ip_fifo_U0_ap_done,
        ap_continue => ps2ip_fifo_U0_ap_continue,
        ap_idle => ps2ip_fifo_U0_ap_idle,
        ap_ready => ps2ip_fifo_U0_ap_ready,
        slaveIn_TVALID => slaveIn_TVALID,
        slaveIn_TDATA => slaveIn_TDATA,
        slaveIn_TREADY => ps2ip_fifo_U0_slaveIn_TREADY,
        slaveIn_TSTRB => slaveIn_TSTRB,
        slaveIn_TLAST => slaveIn_TLAST,
        ps2ipFifo_V_data_V_din => ps2ip_fifo_U0_ps2ipFifo_V_data_V_din,
        ps2ipFifo_V_data_V_full_n => ps2ipFifo_V_data_V_full_n,
        ps2ipFifo_V_data_V_write => ps2ip_fifo_U0_ps2ipFifo_V_data_V_write,
        ps2ipFifo_V_strb_V_din => ps2ip_fifo_U0_ps2ipFifo_V_strb_V_din,
        ps2ipFifo_V_strb_V_full_n => ps2ipFifo_V_strb_V_full_n,
        ps2ipFifo_V_strb_V_write => ps2ip_fifo_U0_ps2ipFifo_V_strb_V_write,
        ps2ipFifo_V_last_V_din => ps2ip_fifo_U0_ps2ipFifo_V_last_V_din,
        ps2ipFifo_V_last_V_full_n => ps2ipFifo_V_last_V_full_n,
        ps2ipFifo_V_last_V_write => ps2ip_fifo_U0_ps2ipFifo_V_last_V_write);

    core_U0 : component core
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => core_U0_ap_start,
        start_full_n => core_U0_start_full_n,
        ap_done => core_U0_ap_done,
        ap_continue => core_U0_ap_continue,
        ap_idle => core_U0_ap_idle,
        ap_ready => core_U0_ap_ready,
        rule1cnt_V_buf_dout => rule1cnt_V_buf_c_dout,
        rule1cnt_V_buf_empty_n => rule1cnt_V_buf_c_empty_n,
        rule1cnt_V_buf_read => core_U0_rule1cnt_V_buf_read,
        rule2cnt_V_buf_dout => rule2cnt_V_buf_c_dout,
        rule2cnt_V_buf_empty_n => rule2cnt_V_buf_c_empty_n,
        rule2cnt_V_buf_read => core_U0_rule2cnt_V_buf_read,
        rule3cnt_V_buf_dout => rule3cnt_V_buf_c_dout,
        rule3cnt_V_buf_empty_n => rule3cnt_V_buf_c_empty_n,
        rule3cnt_V_buf_read => core_U0_rule3cnt_V_buf_read,
        rule1cnt_V_buf_out_din => core_U0_rule1cnt_V_buf_out_din,
        rule1cnt_V_buf_out_full_n => rule1cnt_V_buf_c31_full_n,
        rule1cnt_V_buf_out_write => core_U0_rule1cnt_V_buf_out_write,
        rule2cnt_V_buf_out_din => core_U0_rule2cnt_V_buf_out_din,
        rule2cnt_V_buf_out_full_n => rule2cnt_V_buf_c32_full_n,
        rule2cnt_V_buf_out_write => core_U0_rule2cnt_V_buf_out_write,
        rule3cnt_V_buf_out_din => core_U0_rule3cnt_V_buf_out_din,
        rule3cnt_V_buf_out_full_n => rule3cnt_V_buf_c33_full_n,
        rule3cnt_V_buf_out_write => core_U0_rule3cnt_V_buf_out_write,
        start_out => core_U0_start_out,
        start_write => core_U0_start_write,
        p_read => regrule1_V_channel_dout,
        p_read1 => regrule2_V_channel_dout,
        p_read2 => regrule3_V_channel_dout,
        ps2ipFifo_V_data_V_dout => ps2ipFifo_V_data_V_dout,
        ps2ipFifo_V_data_V_empty_n => ps2ipFifo_V_data_V_empty_n,
        ps2ipFifo_V_data_V_read => core_U0_ps2ipFifo_V_data_V_read,
        ps2ipFifo_V_strb_V_dout => ps2ipFifo_V_strb_V_dout,
        ps2ipFifo_V_strb_V_empty_n => ps2ipFifo_V_strb_V_empty_n,
        ps2ipFifo_V_strb_V_read => core_U0_ps2ipFifo_V_strb_V_read,
        ps2ipFifo_V_last_V_dout => ps2ipFifo_V_last_V_dout,
        ps2ipFifo_V_last_V_empty_n => ps2ipFifo_V_last_V_empty_n,
        ps2ipFifo_V_last_V_read => core_U0_ps2ipFifo_V_last_V_read,
        ip2psFifo_V_data_V_din => core_U0_ip2psFifo_V_data_V_din,
        ip2psFifo_V_data_V_full_n => ip2psFifo_V_data_V_full_n,
        ip2psFifo_V_data_V_write => core_U0_ip2psFifo_V_data_V_write,
        ip2psFifo_V_strb_V_din => core_U0_ip2psFifo_V_strb_V_din,
        ip2psFifo_V_strb_V_full_n => ip2psFifo_V_strb_V_full_n,
        ip2psFifo_V_strb_V_write => core_U0_ip2psFifo_V_strb_V_write,
        ip2psFifo_V_last_V_din => core_U0_ip2psFifo_V_last_V_din,
        ip2psFifo_V_last_V_full_n => ip2psFifo_V_last_V_full_n,
        ip2psFifo_V_last_V_write => core_U0_ip2psFifo_V_last_V_write);

    okanonas284_U0 : component okanonas284
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => okanonas284_U0_ap_start,
        ap_done => okanonas284_U0_ap_done,
        ap_continue => okanonas284_U0_ap_continue,
        ap_idle => okanonas284_U0_ap_idle,
        ap_ready => okanonas284_U0_ap_ready,
        rule1cnt_V_buf_dout => rule1cnt_V_buf_c31_dout,
        rule1cnt_V_buf_empty_n => rule1cnt_V_buf_c31_empty_n,
        rule1cnt_V_buf_read => okanonas284_U0_rule1cnt_V_buf_read);

    okanonas285_U0 : component okanonas285
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => okanonas285_U0_ap_start,
        ap_done => okanonas285_U0_ap_done,
        ap_continue => okanonas285_U0_ap_continue,
        ap_idle => okanonas285_U0_ap_idle,
        ap_ready => okanonas285_U0_ap_ready,
        rule2cnt_V_buf_dout => rule2cnt_V_buf_c32_dout,
        rule2cnt_V_buf_empty_n => rule2cnt_V_buf_c32_empty_n,
        rule2cnt_V_buf_read => okanonas285_U0_rule2cnt_V_buf_read);

    okanonas2_U0 : component okanonas2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => okanonas2_U0_ap_start,
        ap_done => okanonas2_U0_ap_done,
        ap_continue => okanonas2_U0_ap_continue,
        ap_idle => okanonas2_U0_ap_idle,
        ap_ready => okanonas2_U0_ap_ready,
        rule3cnt_V_buf_dout => rule3cnt_V_buf_c33_dout,
        rule3cnt_V_buf_empty_n => rule3cnt_V_buf_c33_empty_n,
        rule3cnt_V_buf_read => okanonas2_U0_rule3cnt_V_buf_read);

    ip2ps_fifo_U0 : component ip2ps_fifo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ip2ps_fifo_U0_ap_start,
        ap_done => ip2ps_fifo_U0_ap_done,
        ap_continue => ip2ps_fifo_U0_ap_continue,
        ap_idle => ip2ps_fifo_U0_ap_idle,
        ap_ready => ip2ps_fifo_U0_ap_ready,
        masterOut_TREADY => masterOut_TREADY,
        masterOut_TDATA => ip2ps_fifo_U0_masterOut_TDATA,
        masterOut_TVALID => ip2ps_fifo_U0_masterOut_TVALID,
        masterOut_TSTRB => ip2ps_fifo_U0_masterOut_TSTRB,
        masterOut_TLAST => ip2ps_fifo_U0_masterOut_TLAST,
        ip2psFifo_V_data_V_dout => ip2psFifo_V_data_V_dout,
        ip2psFifo_V_data_V_empty_n => ip2psFifo_V_data_V_empty_n,
        ip2psFifo_V_data_V_read => ip2ps_fifo_U0_ip2psFifo_V_data_V_read,
        ip2psFifo_V_strb_V_dout => ip2psFifo_V_strb_V_dout,
        ip2psFifo_V_strb_V_empty_n => ip2psFifo_V_strb_V_empty_n,
        ip2psFifo_V_strb_V_read => ip2ps_fifo_U0_ip2psFifo_V_strb_V_read,
        ip2psFifo_V_last_V_dout => ip2psFifo_V_last_V_dout,
        ip2psFifo_V_last_V_empty_n => ip2psFifo_V_last_V_empty_n,
        ip2psFifo_V_last_V_read => ip2ps_fifo_U0_ip2psFifo_V_last_V_read);

    rule1_V_c1_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => my_ip_hls_entry3_U0_rule1_V_out_din,
        if_full_n => rule1_V_c1_full_n,
        if_write => my_ip_hls_entry3_U0_rule1_V_out_write,
        if_dout => rule1_V_c1_dout,
        if_empty_n => rule1_V_c1_empty_n,
        if_read => my_ip_hls_entry90_U0_rule1_V_read);

    rule2_V_c2_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => my_ip_hls_entry3_U0_rule2_V_out_din,
        if_full_n => rule2_V_c2_full_n,
        if_write => my_ip_hls_entry3_U0_rule2_V_out_write,
        if_dout => rule2_V_c2_dout,
        if_empty_n => rule2_V_c2_empty_n,
        if_read => my_ip_hls_entry90_U0_rule2_V_read);

    rule3_V_c3_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => my_ip_hls_entry3_U0_rule3_V_out_din,
        if_full_n => rule3_V_c3_full_n,
        if_write => my_ip_hls_entry3_U0_rule3_V_out_write,
        if_dout => rule3_V_c3_dout,
        if_empty_n => rule3_V_c3_empty_n,
        if_read => my_ip_hls_entry90_U0_rule3_V_read);

    rule1cnt_V_c4_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => my_ip_hls_entry3_U0_rule1cnt_V_out_din,
        if_full_n => rule1cnt_V_c4_full_n,
        if_write => my_ip_hls_entry3_U0_rule1cnt_V_out_write,
        if_dout => rule1cnt_V_c4_dout,
        if_empty_n => rule1cnt_V_c4_empty_n,
        if_read => my_ip_hls_entry90_U0_rule1cnt_V_read);

    rule2cnt_V_c5_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => my_ip_hls_entry3_U0_rule2cnt_V_out_din,
        if_full_n => rule2cnt_V_c5_full_n,
        if_write => my_ip_hls_entry3_U0_rule2cnt_V_out_write,
        if_dout => rule2cnt_V_c5_dout,
        if_empty_n => rule2cnt_V_c5_empty_n,
        if_read => my_ip_hls_entry90_U0_rule2cnt_V_read);

    rule3cnt_V_c6_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => my_ip_hls_entry3_U0_rule3cnt_V_out_din,
        if_full_n => rule3cnt_V_c6_full_n,
        if_write => my_ip_hls_entry3_U0_rule3cnt_V_out_write,
        if_dout => rule3cnt_V_c6_dout,
        if_empty_n => rule3cnt_V_c6_empty_n,
        if_read => my_ip_hls_entry90_U0_rule3cnt_V_read);

    rule1_V_c_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => my_ip_hls_entry90_U0_rule1_V_out_din,
        if_full_n => rule1_V_c_full_n,
        if_write => my_ip_hls_entry90_U0_rule1_V_out_write,
        if_dout => rule1_V_c_dout,
        if_empty_n => rule1_V_c_empty_n,
        if_read => okanonas82_U0_rule_V_read);

    rule2_V_c_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => my_ip_hls_entry90_U0_rule2_V_out_din,
        if_full_n => rule2_V_c_full_n,
        if_write => my_ip_hls_entry90_U0_rule2_V_out_write,
        if_dout => rule2_V_c_dout,
        if_empty_n => rule2_V_c_empty_n,
        if_read => okanonas83_U0_rule_V_read);

    rule3_V_c_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => my_ip_hls_entry90_U0_rule3_V_out_din,
        if_full_n => rule3_V_c_full_n,
        if_write => my_ip_hls_entry90_U0_rule3_V_out_write,
        if_dout => rule3_V_c_dout,
        if_empty_n => rule3_V_c_empty_n,
        if_read => okanonas_U0_rule_V_read);

    rule1cnt_V_c_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => my_ip_hls_entry90_U0_rule1cnt_V_out_din,
        if_full_n => rule1cnt_V_c_full_n,
        if_write => my_ip_hls_entry90_U0_rule1cnt_V_out_write,
        if_dout => rule1cnt_V_c_dout,
        if_empty_n => rule1cnt_V_c_empty_n,
        if_read => Block_codeRepl6_proc_U0_rule1cnt_V_read);

    rule2cnt_V_c_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => my_ip_hls_entry90_U0_rule2cnt_V_out_din,
        if_full_n => rule2cnt_V_c_full_n,
        if_write => my_ip_hls_entry90_U0_rule2cnt_V_out_write,
        if_dout => rule2cnt_V_c_dout,
        if_empty_n => rule2cnt_V_c_empty_n,
        if_read => Block_codeRepl6_proc_U0_rule2cnt_V_read);

    rule3cnt_V_c_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => my_ip_hls_entry90_U0_rule3cnt_V_out_din,
        if_full_n => rule3cnt_V_c_full_n,
        if_write => my_ip_hls_entry90_U0_rule3cnt_V_out_write,
        if_dout => rule3cnt_V_c_dout,
        if_empty_n => rule3cnt_V_c_empty_n,
        if_read => Block_codeRepl6_proc_U0_rule3cnt_V_read);

    rule3cnt_V_buf_c_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl6_proc_U0_rule3cnt_V_buf_out_din,
        if_full_n => rule3cnt_V_buf_c_full_n,
        if_write => Block_codeRepl6_proc_U0_rule3cnt_V_buf_out_write,
        if_dout => rule3cnt_V_buf_c_dout,
        if_empty_n => rule3cnt_V_buf_c_empty_n,
        if_read => core_U0_rule3cnt_V_buf_read);

    rule2cnt_V_buf_c_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl6_proc_U0_rule2cnt_V_buf_out_din,
        if_full_n => rule2cnt_V_buf_c_full_n,
        if_write => Block_codeRepl6_proc_U0_rule2cnt_V_buf_out_write,
        if_dout => rule2cnt_V_buf_c_dout,
        if_empty_n => rule2cnt_V_buf_c_empty_n,
        if_read => core_U0_rule2cnt_V_buf_read);

    rule1cnt_V_buf_c_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl6_proc_U0_rule1cnt_V_buf_out_din,
        if_full_n => rule1cnt_V_buf_c_full_n,
        if_write => Block_codeRepl6_proc_U0_rule1cnt_V_buf_out_write,
        if_dout => rule1cnt_V_buf_c_dout,
        if_empty_n => rule1cnt_V_buf_c_empty_n,
        if_read => core_U0_rule1cnt_V_buf_read);

    regrule1_V_channel_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => okanonas82_U0_ap_return,
        if_full_n => regrule1_V_channel_full_n,
        if_write => okanonas82_U0_ap_done,
        if_dout => regrule1_V_channel_dout,
        if_empty_n => regrule1_V_channel_empty_n,
        if_read => core_U0_ap_ready);

    regrule2_V_channel_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => okanonas83_U0_ap_return,
        if_full_n => regrule2_V_channel_full_n,
        if_write => okanonas83_U0_ap_done,
        if_dout => regrule2_V_channel_dout,
        if_empty_n => regrule2_V_channel_empty_n,
        if_read => core_U0_ap_ready);

    regrule3_V_channel_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => okanonas_U0_ap_return,
        if_full_n => regrule3_V_channel_full_n,
        if_write => okanonas_U0_ap_done,
        if_dout => regrule3_V_channel_dout,
        if_empty_n => regrule3_V_channel_empty_n,
        if_read => core_U0_ap_ready);

    ps2ipFifo_V_data_V_U : component fifo_w32_d64_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ps2ip_fifo_U0_ps2ipFifo_V_data_V_din,
        if_full_n => ps2ipFifo_V_data_V_full_n,
        if_write => ps2ip_fifo_U0_ps2ipFifo_V_data_V_write,
        if_dout => ps2ipFifo_V_data_V_dout,
        if_empty_n => ps2ipFifo_V_data_V_empty_n,
        if_read => core_U0_ps2ipFifo_V_data_V_read);

    ps2ipFifo_V_strb_V_U : component fifo_w4_d64_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ps2ip_fifo_U0_ps2ipFifo_V_strb_V_din,
        if_full_n => ps2ipFifo_V_strb_V_full_n,
        if_write => ps2ip_fifo_U0_ps2ipFifo_V_strb_V_write,
        if_dout => ps2ipFifo_V_strb_V_dout,
        if_empty_n => ps2ipFifo_V_strb_V_empty_n,
        if_read => core_U0_ps2ipFifo_V_strb_V_read);

    ps2ipFifo_V_last_V_U : component fifo_w1_d64_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ps2ip_fifo_U0_ps2ipFifo_V_last_V_din,
        if_full_n => ps2ipFifo_V_last_V_full_n,
        if_write => ps2ip_fifo_U0_ps2ipFifo_V_last_V_write,
        if_dout => ps2ipFifo_V_last_V_dout,
        if_empty_n => ps2ipFifo_V_last_V_empty_n,
        if_read => core_U0_ps2ipFifo_V_last_V_read);

    rule1cnt_V_buf_c31_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => core_U0_rule1cnt_V_buf_out_din,
        if_full_n => rule1cnt_V_buf_c31_full_n,
        if_write => core_U0_rule1cnt_V_buf_out_write,
        if_dout => rule1cnt_V_buf_c31_dout,
        if_empty_n => rule1cnt_V_buf_c31_empty_n,
        if_read => okanonas284_U0_rule1cnt_V_buf_read);

    rule2cnt_V_buf_c32_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => core_U0_rule2cnt_V_buf_out_din,
        if_full_n => rule2cnt_V_buf_c32_full_n,
        if_write => core_U0_rule2cnt_V_buf_out_write,
        if_dout => rule2cnt_V_buf_c32_dout,
        if_empty_n => rule2cnt_V_buf_c32_empty_n,
        if_read => okanonas285_U0_rule2cnt_V_buf_read);

    rule3cnt_V_buf_c33_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => core_U0_rule3cnt_V_buf_out_din,
        if_full_n => rule3cnt_V_buf_c33_full_n,
        if_write => core_U0_rule3cnt_V_buf_out_write,
        if_dout => rule3cnt_V_buf_c33_dout,
        if_empty_n => rule3cnt_V_buf_c33_empty_n,
        if_read => okanonas2_U0_rule3cnt_V_buf_read);

    ip2psFifo_V_data_V_U : component fifo_w32_d64_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => core_U0_ip2psFifo_V_data_V_din,
        if_full_n => ip2psFifo_V_data_V_full_n,
        if_write => core_U0_ip2psFifo_V_data_V_write,
        if_dout => ip2psFifo_V_data_V_dout,
        if_empty_n => ip2psFifo_V_data_V_empty_n,
        if_read => ip2ps_fifo_U0_ip2psFifo_V_data_V_read);

    ip2psFifo_V_strb_V_U : component fifo_w4_d64_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => core_U0_ip2psFifo_V_strb_V_din,
        if_full_n => ip2psFifo_V_strb_V_full_n,
        if_write => core_U0_ip2psFifo_V_strb_V_write,
        if_dout => ip2psFifo_V_strb_V_dout,
        if_empty_n => ip2psFifo_V_strb_V_empty_n,
        if_read => ip2ps_fifo_U0_ip2psFifo_V_strb_V_read);

    ip2psFifo_V_last_V_U : component fifo_w1_d64_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => core_U0_ip2psFifo_V_last_V_din,
        if_full_n => ip2psFifo_V_last_V_full_n,
        if_write => core_U0_ip2psFifo_V_last_V_write,
        if_dout => ip2psFifo_V_last_V_dout,
        if_empty_n => ip2psFifo_V_last_V_empty_n,
        if_read => ip2ps_fifo_U0_ip2psFifo_V_last_V_read);

    start_for_my_ip_hbkb_U : component start_for_my_ip_hbkb
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_my_ip_hls_entry90_U0_din,
        if_full_n => start_for_my_ip_hls_entry90_U0_full_n,
        if_write => my_ip_hls_entry3_U0_start_write,
        if_dout => start_for_my_ip_hls_entry90_U0_dout,
        if_empty_n => start_for_my_ip_hls_entry90_U0_empty_n,
        if_read => my_ip_hls_entry90_U0_ap_ready);

    start_for_Block_ccud_U : component start_for_Block_ccud
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Block_codeRepl6_proc_U0_din,
        if_full_n => start_for_Block_codeRepl6_proc_U0_full_n,
        if_write => my_ip_hls_entry90_U0_start_write,
        if_dout => start_for_Block_codeRepl6_proc_U0_dout,
        if_empty_n => start_for_Block_codeRepl6_proc_U0_empty_n,
        if_read => Block_codeRepl6_proc_U0_ap_ready);

    start_for_okanonadEe_U : component start_for_okanonadEe
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_okanonas82_U0_din,
        if_full_n => start_for_okanonas82_U0_full_n,
        if_write => my_ip_hls_entry90_U0_start_write,
        if_dout => start_for_okanonas82_U0_dout,
        if_empty_n => start_for_okanonas82_U0_empty_n,
        if_read => okanonas82_U0_ap_ready);

    start_for_okanonaeOg_U : component start_for_okanonaeOg
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_okanonas83_U0_din,
        if_full_n => start_for_okanonas83_U0_full_n,
        if_write => my_ip_hls_entry90_U0_start_write,
        if_dout => start_for_okanonas83_U0_dout,
        if_empty_n => start_for_okanonas83_U0_empty_n,
        if_read => okanonas83_U0_ap_ready);

    start_for_okanonafYi_U : component start_for_okanonafYi
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_okanonas_U0_din,
        if_full_n => start_for_okanonas_U0_full_n,
        if_write => my_ip_hls_entry90_U0_start_write,
        if_dout => start_for_okanonas_U0_dout,
        if_empty_n => start_for_okanonas_U0_empty_n,
        if_read => okanonas_U0_ap_ready);

    start_for_okanonag8j_U : component start_for_okanonag8j
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_okanonas284_U0_din,
        if_full_n => start_for_okanonas284_U0_full_n,
        if_write => core_U0_start_write,
        if_dout => start_for_okanonas284_U0_dout,
        if_empty_n => start_for_okanonas284_U0_empty_n,
        if_read => okanonas284_U0_ap_ready);

    start_for_okanonahbi_U : component start_for_okanonahbi
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_okanonas285_U0_din,
        if_full_n => start_for_okanonas285_U0_full_n,
        if_write => core_U0_start_write,
        if_dout => start_for_okanonas285_U0_dout,
        if_empty_n => start_for_okanonas285_U0_empty_n,
        if_read => okanonas285_U0_ap_ready);

    start_for_okanonaibs_U : component start_for_okanonaibs
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_okanonas2_U0_din,
        if_full_n => start_for_okanonas2_U0_full_n,
        if_write => core_U0_start_write,
        if_dout => start_for_okanonas2_U0_dout,
        if_empty_n => start_for_okanonas2_U0_empty_n,
        if_read => okanonas2_U0_ap_ready);

    start_for_ip2ps_fjbC_U : component start_for_ip2ps_fjbC
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_ip2ps_fifo_U0_din,
        if_full_n => start_for_ip2ps_fifo_U0_full_n,
        if_write => core_U0_start_write,
        if_dout => start_for_ip2ps_fifo_U0_dout,
        if_empty_n => start_for_ip2ps_fifo_U0_empty_n,
        if_read => ip2ps_fifo_U0_ap_ready);




    Block_codeRepl6_proc_U0_ap_continue <= ap_const_logic_1;
    Block_codeRepl6_proc_U0_ap_start <= start_for_Block_codeRepl6_proc_U0_empty_n;
    Block_codeRepl6_proc_U0_start_full_n <= ap_const_logic_1;
    Block_codeRepl6_proc_U0_start_write <= ap_const_logic_0;
    ap_channel_done_regrule1_V_channel <= okanonas82_U0_ap_done;
    ap_channel_done_regrule2_V_channel <= okanonas83_U0_ap_done;
    ap_channel_done_regrule3_V_channel <= okanonas_U0_ap_done;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_0;
    core_U0_ap_continue <= ap_const_logic_1;
    core_U0_ap_start <= (regrule3_V_channel_empty_n and regrule2_V_channel_empty_n and regrule1_V_channel_empty_n);
    core_U0_start_full_n <= (start_for_okanonas2_U0_full_n and start_for_okanonas285_U0_full_n and start_for_okanonas284_U0_full_n and start_for_ip2ps_fifo_U0_full_n);
    ip2ps_fifo_U0_ap_continue <= ap_const_logic_1;
    ip2ps_fifo_U0_ap_start <= start_for_ip2ps_fifo_U0_empty_n;
    ip2ps_fifo_U0_start_full_n <= ap_const_logic_1;
    ip2ps_fifo_U0_start_write <= ap_const_logic_0;
    masterOut_TDATA <= ip2ps_fifo_U0_masterOut_TDATA;
    masterOut_TLAST <= ip2ps_fifo_U0_masterOut_TLAST;
    masterOut_TSTRB <= ip2ps_fifo_U0_masterOut_TSTRB;
    masterOut_TVALID <= ip2ps_fifo_U0_masterOut_TVALID;
    my_ip_hls_entry3_U0_ap_continue <= ap_const_logic_1;
    my_ip_hls_entry3_U0_ap_start <= ap_const_logic_1;
    my_ip_hls_entry90_U0_ap_continue <= ap_const_logic_1;
    my_ip_hls_entry90_U0_ap_start <= start_for_my_ip_hls_entry90_U0_empty_n;
    my_ip_hls_entry90_U0_start_full_n <= (start_for_okanonas_U0_full_n and start_for_okanonas83_U0_full_n and start_for_okanonas82_U0_full_n and start_for_Block_codeRepl6_proc_U0_full_n);
    okanonas284_U0_ap_continue <= ap_const_logic_1;
    okanonas284_U0_ap_start <= start_for_okanonas284_U0_empty_n;
    okanonas284_U0_start_full_n <= ap_const_logic_1;
    okanonas284_U0_start_write <= ap_const_logic_0;
    okanonas285_U0_ap_continue <= ap_const_logic_1;
    okanonas285_U0_ap_start <= start_for_okanonas285_U0_empty_n;
    okanonas285_U0_start_full_n <= ap_const_logic_1;
    okanonas285_U0_start_write <= ap_const_logic_0;
    okanonas2_U0_ap_continue <= ap_const_logic_1;
    okanonas2_U0_ap_start <= start_for_okanonas2_U0_empty_n;
    okanonas2_U0_start_full_n <= ap_const_logic_1;
    okanonas2_U0_start_write <= ap_const_logic_0;
    okanonas82_U0_ap_continue <= regrule1_V_channel_full_n;
    okanonas82_U0_ap_start <= start_for_okanonas82_U0_empty_n;
    okanonas82_U0_start_full_n <= ap_const_logic_1;
    okanonas82_U0_start_write <= ap_const_logic_0;
    okanonas83_U0_ap_continue <= regrule2_V_channel_full_n;
    okanonas83_U0_ap_start <= start_for_okanonas83_U0_empty_n;
    okanonas83_U0_start_full_n <= ap_const_logic_1;
    okanonas83_U0_start_write <= ap_const_logic_0;
    okanonas_U0_ap_continue <= regrule3_V_channel_full_n;
    okanonas_U0_ap_start <= start_for_okanonas_U0_empty_n;
    okanonas_U0_start_full_n <= ap_const_logic_1;
    okanonas_U0_start_write <= ap_const_logic_0;
    ps2ip_fifo_U0_ap_continue <= ap_const_logic_1;
    ps2ip_fifo_U0_ap_start <= ap_const_logic_1;
    ps2ip_fifo_U0_start_full_n <= ap_const_logic_1;
    ps2ip_fifo_U0_start_write <= ap_const_logic_0;
    slaveIn_TREADY <= ps2ip_fifo_U0_slaveIn_TREADY;
    start_for_Block_codeRepl6_proc_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_ip2ps_fifo_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_my_ip_hls_entry90_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_okanonas284_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_okanonas285_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_okanonas2_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_okanonas82_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_okanonas83_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_okanonas_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
